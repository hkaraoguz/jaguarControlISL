/* Auto-generated by genmsg_cpp for file /home/ramazan/workspace_jaguar/gps_node/msg/GPSFix.msg */
#ifndef GPS_NODE_MESSAGE_GPSFIX_H
#define GPS_NODE_MESSAGE_GPSFIX_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "gps_node/GPSStatus.h"

namespace gps_node
{
template <class ContainerAllocator>
struct GPSFix_ {
  typedef GPSFix_<ContainerAllocator> Type;

  GPSFix_()
  : header()
  , status()
  , latitude(0.0)
  , longitude(0.0)
  , altitude(0.0)
  , track(0.0)
  , speed(0.0)
  , climb(0.0)
  , pitch(0.0)
  , roll(0.0)
  , dip(0.0)
  , time(0.0)
  , gdop(0.0)
  , pdop(0.0)
  , hdop(0.0)
  , vdop(0.0)
  , tdop(0.0)
  , err(0.0)
  , err_horz(0.0)
  , err_vert(0.0)
  , err_track(0.0)
  , err_speed(0.0)
  , err_climb(0.0)
  , err_time(0.0)
  , err_pitch(0.0)
  , err_roll(0.0)
  , err_dip(0.0)
  , position_covariance()
  , position_covariance_type(0)
  , lastRawData()
  , rmc1UTCTime()
  , rmc2STatus()
  , rmc3Latitude()
  , rmc4LatNorS()
  , rmc5Longitude()
  , rmc6LongEorW()
  , rmc7SpeedOverGroundInKnots()
  , rmc8TrackMadeGoodDegreeTrue()
  , rmc9Date()
  , rmc10MagneticVariationDegrees()
  , rmc11MagnetEorW()
  , rmc12FAAModeIndicator()
  , gga1UTC()
  , gga2Latitude()
  , gga3LatNorS()
  , gga4Longitude()
  , gga5LongEorW()
  , gga6GPSQuality()
  , gga6GPSQualityStatus()
  , gga7NumberOfSatellites()
  , gga8HorizontalDilutionOfPrescision()
  , gga9AntennaAltitudeAboveBelowMeanSeaLevel()
  , gga10UnitsOfAntennaAltitude_inMeters()
  , gga11GeoidalSeparation()
  , gga12UnitsOfGeoidalSeperation()
  , gga13AgeOfDifferentialGPSData()
  , gga14DifferentialReferenceStationID()
  , gsa1SelectionMode()
  , gsa2Mode()
  , gsa3ID1()
  , gsa4ID2()
  , gsa5ID3()
  , gsa6ID4()
  , gsa7ID5()
  , gsa8ID6()
  , gsa9ID7()
  , gsa10ID8()
  , gsa11ID9()
  , gsa12ID10()
  , gsa13ID11()
  , gsa14ID12()
  , gsa15PDOP()
  , gsa16HDOP()
  , gsa17VDOP()
  , gsvAdet(0)
  , gsv1NumberOfGSV()
  , gsv2NumberOfMessage()
  , gsv3NumberOfStallitesInView()
  , gsv4SatellitePRNNumber()
  , gsv5ElevationDegrees()
  , gsv6AzimuthIndegries()
  , gsv7SRNin_dB()
  , gsv8MoreSatelliteInfoQuadruples()
  {
    position_covariance.assign(0.0);
  }

  GPSFix_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , status(_alloc)
  , latitude(0.0)
  , longitude(0.0)
  , altitude(0.0)
  , track(0.0)
  , speed(0.0)
  , climb(0.0)
  , pitch(0.0)
  , roll(0.0)
  , dip(0.0)
  , time(0.0)
  , gdop(0.0)
  , pdop(0.0)
  , hdop(0.0)
  , vdop(0.0)
  , tdop(0.0)
  , err(0.0)
  , err_horz(0.0)
  , err_vert(0.0)
  , err_track(0.0)
  , err_speed(0.0)
  , err_climb(0.0)
  , err_time(0.0)
  , err_pitch(0.0)
  , err_roll(0.0)
  , err_dip(0.0)
  , position_covariance()
  , position_covariance_type(0)
  , lastRawData(_alloc)
  , rmc1UTCTime(_alloc)
  , rmc2STatus(_alloc)
  , rmc3Latitude(_alloc)
  , rmc4LatNorS(_alloc)
  , rmc5Longitude(_alloc)
  , rmc6LongEorW(_alloc)
  , rmc7SpeedOverGroundInKnots(_alloc)
  , rmc8TrackMadeGoodDegreeTrue(_alloc)
  , rmc9Date(_alloc)
  , rmc10MagneticVariationDegrees(_alloc)
  , rmc11MagnetEorW(_alloc)
  , rmc12FAAModeIndicator(_alloc)
  , gga1UTC(_alloc)
  , gga2Latitude(_alloc)
  , gga3LatNorS(_alloc)
  , gga4Longitude(_alloc)
  , gga5LongEorW(_alloc)
  , gga6GPSQuality(_alloc)
  , gga6GPSQualityStatus(_alloc)
  , gga7NumberOfSatellites(_alloc)
  , gga8HorizontalDilutionOfPrescision(_alloc)
  , gga9AntennaAltitudeAboveBelowMeanSeaLevel(_alloc)
  , gga10UnitsOfAntennaAltitude_inMeters(_alloc)
  , gga11GeoidalSeparation(_alloc)
  , gga12UnitsOfGeoidalSeperation(_alloc)
  , gga13AgeOfDifferentialGPSData(_alloc)
  , gga14DifferentialReferenceStationID(_alloc)
  , gsa1SelectionMode(_alloc)
  , gsa2Mode(_alloc)
  , gsa3ID1(_alloc)
  , gsa4ID2(_alloc)
  , gsa5ID3(_alloc)
  , gsa6ID4(_alloc)
  , gsa7ID5(_alloc)
  , gsa8ID6(_alloc)
  , gsa9ID7(_alloc)
  , gsa10ID8(_alloc)
  , gsa11ID9(_alloc)
  , gsa12ID10(_alloc)
  , gsa13ID11(_alloc)
  , gsa14ID12(_alloc)
  , gsa15PDOP(_alloc)
  , gsa16HDOP(_alloc)
  , gsa17VDOP(_alloc)
  , gsvAdet(0)
  , gsv1NumberOfGSV(_alloc)
  , gsv2NumberOfMessage(_alloc)
  , gsv3NumberOfStallitesInView(_alloc)
  , gsv4SatellitePRNNumber(_alloc)
  , gsv5ElevationDegrees(_alloc)
  , gsv6AzimuthIndegries(_alloc)
  , gsv7SRNin_dB(_alloc)
  , gsv8MoreSatelliteInfoQuadruples(_alloc)
  {
    position_covariance.assign(0.0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::gps_node::GPSStatus_<ContainerAllocator>  _status_type;
   ::gps_node::GPSStatus_<ContainerAllocator>  status;

  typedef double _latitude_type;
  double latitude;

  typedef double _longitude_type;
  double longitude;

  typedef double _altitude_type;
  double altitude;

  typedef double _track_type;
  double track;

  typedef double _speed_type;
  double speed;

  typedef double _climb_type;
  double climb;

  typedef double _pitch_type;
  double pitch;

  typedef double _roll_type;
  double roll;

  typedef double _dip_type;
  double dip;

  typedef double _time_type;
  double time;

  typedef double _gdop_type;
  double gdop;

  typedef double _pdop_type;
  double pdop;

  typedef double _hdop_type;
  double hdop;

  typedef double _vdop_type;
  double vdop;

  typedef double _tdop_type;
  double tdop;

  typedef double _err_type;
  double err;

  typedef double _err_horz_type;
  double err_horz;

  typedef double _err_vert_type;
  double err_vert;

  typedef double _err_track_type;
  double err_track;

  typedef double _err_speed_type;
  double err_speed;

  typedef double _err_climb_type;
  double err_climb;

  typedef double _err_time_type;
  double err_time;

  typedef double _err_pitch_type;
  double err_pitch;

  typedef double _err_roll_type;
  double err_roll;

  typedef double _err_dip_type;
  double err_dip;

  typedef boost::array<double, 9>  _position_covariance_type;
  boost::array<double, 9>  position_covariance;

  typedef uint8_t _position_covariance_type_type;
  uint8_t position_covariance_type;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lastRawData_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  lastRawData;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rmc1UTCTime_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rmc1UTCTime;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rmc2STatus_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rmc2STatus;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rmc3Latitude_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rmc3Latitude;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rmc4LatNorS_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rmc4LatNorS;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rmc5Longitude_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rmc5Longitude;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rmc6LongEorW_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rmc6LongEorW;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rmc7SpeedOverGroundInKnots_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rmc7SpeedOverGroundInKnots;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rmc8TrackMadeGoodDegreeTrue_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rmc8TrackMadeGoodDegreeTrue;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rmc9Date_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rmc9Date;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rmc10MagneticVariationDegrees_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rmc10MagneticVariationDegrees;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rmc11MagnetEorW_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rmc11MagnetEorW;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rmc12FAAModeIndicator_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rmc12FAAModeIndicator;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga1UTC_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga1UTC;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga2Latitude_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga2Latitude;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga3LatNorS_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga3LatNorS;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga4Longitude_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga4Longitude;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga5LongEorW_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga5LongEorW;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga6GPSQuality_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga6GPSQuality;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga6GPSQualityStatus_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga6GPSQualityStatus;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga7NumberOfSatellites_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga7NumberOfSatellites;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga8HorizontalDilutionOfPrescision_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga8HorizontalDilutionOfPrescision;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga9AntennaAltitudeAboveBelowMeanSeaLevel_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga9AntennaAltitudeAboveBelowMeanSeaLevel;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga10UnitsOfAntennaAltitude_inMeters_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga10UnitsOfAntennaAltitude_inMeters;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga11GeoidalSeparation_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga11GeoidalSeparation;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga12UnitsOfGeoidalSeperation_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga12UnitsOfGeoidalSeperation;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga13AgeOfDifferentialGPSData_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga13AgeOfDifferentialGPSData;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gga14DifferentialReferenceStationID_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gga14DifferentialReferenceStationID;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa1SelectionMode_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa1SelectionMode;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa2Mode_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa2Mode;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa3ID1_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa3ID1;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa4ID2_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa4ID2;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa5ID3_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa5ID3;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa6ID4_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa6ID4;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa7ID5_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa7ID5;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa8ID6_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa8ID6;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa9ID7_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa9ID7;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa10ID8_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa10ID8;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa11ID9_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa11ID9;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa12ID10_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa12ID10;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa13ID11_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa13ID11;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa14ID12_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa14ID12;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa15PDOP_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa15PDOP;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa16HDOP_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa16HDOP;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsa17VDOP_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsa17VDOP;

  typedef int8_t _gsvAdet_type;
  int8_t gsvAdet;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsv1NumberOfGSV_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsv1NumberOfGSV;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsv2NumberOfMessage_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsv2NumberOfMessage;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsv3NumberOfStallitesInView_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsv3NumberOfStallitesInView;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsv4SatellitePRNNumber_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsv4SatellitePRNNumber;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsv5ElevationDegrees_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsv5ElevationDegrees;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsv6AzimuthIndegries_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsv6AzimuthIndegries;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsv7SRNin_dB_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsv7SRNin_dB;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gsv8MoreSatelliteInfoQuadruples_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  gsv8MoreSatelliteInfoQuadruples;

  enum { COVARIANCE_TYPE_UNKNOWN = 0 };
  enum { COVARIANCE_TYPE_APPROXIMATED = 1 };
  enum { COVARIANCE_TYPE_DIAGONAL_KNOWN = 2 };
  enum { COVARIANCE_TYPE_KNOWN = 3 };

  typedef boost::shared_ptr< ::gps_node::GPSFix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_node::GPSFix_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GPSFix
typedef  ::gps_node::GPSFix_<std::allocator<void> > GPSFix;

typedef boost::shared_ptr< ::gps_node::GPSFix> GPSFixPtr;
typedef boost::shared_ptr< ::gps_node::GPSFix const> GPSFixConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gps_node::GPSFix_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gps_node::GPSFix_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gps_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gps_node::GPSFix_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gps_node::GPSFix_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gps_node::GPSFix_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7d80aa63f37a9b7b932b38216fc5314b";
  }

  static const char* value(const  ::gps_node::GPSFix_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7d80aa63f37a9b7bULL;
  static const uint64_t static_value2 = 0x932b38216fc5314bULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_node::GPSFix_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_node/GPSFix";
  }

  static const char* value(const  ::gps_node::GPSFix_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gps_node::GPSFix_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# A more complete GPS fix to supplement sensor_msgs/NavSatFix.\n\
Header header\n\
\n\
GPSStatus status\n\
\n\
# Latitude (degrees). Positive is north of equator; negative is south.\n\
float64 latitude\n\
\n\
# Longitude (degrees). Positive is east of prime meridian, negative west.\n\
float64 longitude\n\
\n\
# Altitude (meters). Positive is above reference (e.g., sea level).\n\
float64 altitude\n\
\n\
# Direction (degrees from north)\n\
float64 track\n\
\n\
# Ground speed (meters/second)\n\
float64 speed\n\
\n\
# Vertical speed (meters/second)\n\
float64 climb\n\
\n\
# Device orientation (units in degrees)\n\
float64 pitch\n\
float64 roll\n\
float64 dip\n\
\n\
# GPS time\n\
float64 time\n\
\n\
## Dilution of precision; Xdop<=0 means the value is unknown\n\
\n\
# Total (positional-temporal) dilution of precision\n\
float64 gdop\n\
\n\
# Positional (3D) dilution of precision\n\
float64 pdop\n\
\n\
# Horizontal dilution of precision\n\
float64 hdop\n\
\n\
# Vertical dilution of precision\n\
float64 vdop\n\
\n\
# Temporal dilution of precision\n\
float64 tdop\n\
\n\
## Uncertainty of measurement, 95% confidence\n\
\n\
# Spherical position uncertainty (meters) [epe]\n\
float64 err\n\
\n\
# Horizontal position uncertainty (meters) [eph]\n\
float64 err_horz\n\
\n\
# Vertical position uncertainty (meters) [epv]\n\
float64 err_vert\n\
\n\
# Track uncertainty (degrees) [epd]\n\
float64 err_track\n\
\n\
# Ground speed uncertainty (meters/second) [eps]\n\
float64 err_speed\n\
\n\
# Vertical speed uncertainty (meters/second) [epc]\n\
float64 err_climb\n\
\n\
# Temporal uncertainty [ept]\n\
float64 err_time\n\
\n\
# Orientation uncertainty (degrees)\n\
float64 err_pitch\n\
float64 err_roll\n\
float64 err_dip\n\
\n\
# Position covariance [m^2] defined relative to a tangential plane\n\
# through the reported position. The components are East, North, and\n\
# Up (ENU), in row-major order.\n\
\n\
float64[9] position_covariance\n\
\n\
uint8 COVARIANCE_TYPE_UNKNOWN = 0\n\
uint8 COVARIANCE_TYPE_APPROXIMATED = 1\n\
uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\n\
uint8 COVARIANCE_TYPE_KNOWN = 3\n\
\n\
uint8 position_covariance_type\n\
\n\
string lastRawData\n\
###############################################################################\n\
#=== RMC - Recommended Minimum Navigation Information ===\n\
#\n\
#------------------------------------------------------------------------------\n\
#                                                          12\n\
#        1         2 3       4 5        6  7   8   9    10 11|  13\n\
#        |         | |       | |        |  |   |   |    |  | |   |\n\
# $--RMC,hhmmss.ss,A,llll.ll,a,yyyyy.yy,a,x.x,x.x,xxxx,x.x,a,m,*hh<CR><LF>\n\
#------------------------------------------------------------------------------#\n\
#\n\
#Field Number:\n\
#\n\
#1. UTC Time\n\
string rmc1UTCTime\n\
#2. Status, V=Navigation receiver warning A=Valid\n\
string rmc2STatus\n\
#3. Latitude\n\
string rmc3Latitude\n\
#4. N or S\n\
string rmc4LatNorS\n\
#5. Longitude\n\
string rmc5Longitude\n\
#6. E or W\n\
string rmc6LongEorW\n\
#7. Speed over ground, knots\n\
string rmc7SpeedOverGroundInKnots\n\
#8. Track made good, degrees true\n\
string rmc8TrackMadeGoodDegreeTrue\n\
#9. Date, ddmmyy\n\
string rmc9Date\n\
#10. Magnetic Variation, degrees\n\
string rmc10MagneticVariationDegrees\n\
#11. E or W\n\
string rmc11MagnetEorW\n\
#12. FAA mode indicator (NMEA 2.3 and later)\n\
string rmc12FAAModeIndicator\n\
#13. Checksum\n\
###############################################################################\n\
#                                                      11\n\
#        1         2       3 4        5 6 7  8   9  10 |  12 13  14   15\n\
#        |         |       | |        | | |  |   |   | |   | |   |    |\n\
# $--GGA,hhmmss.ss,llll.ll,a,yyyyy.yy,a,x,xx,x.x,x.x,M,x.x,M,x.x,xxxx*hh<CR><LF>\n\
#------------------------------------------------------------------------------\n\
#\n\
#Field Number:\n\
#1. Universal Time Coordinated (UTC)\n\
string gga1UTC\n\
#2. Latitude\n\
string gga2Latitude\n\
#3. N or S (North or South)\n\
string gga3LatNorS\n\
#4. Longitude\n\
string gga4Longitude\n\
#5. E or W (East or West)\n\
string gga5LongEorW\n\
#6. GPS Quality Indicator,\n\
string gga6GPSQuality\n\
string gga6GPSQualityStatus\n\
#     - 0 - fix not available,\n\
#     - 1 - GPS fix,\n\
#     - 2 - Differential GPS fix\n\
#           (values above 2 are 2.3 features)\n\
#     - 3 = PPS fix\n\
#     - 4 = Real Time Kinematic\n\
#     - 5 = Float RTK\n\
#     - 6 = estimated (dead reckoning)\n\
#     - 7 = Manual input mode\n\
#     - 8 = Simulation mode\n\
#7. Number of satellites in view, 00 - 12\n\
string gga7NumberOfSatellites\n\
#8. Horizontal Dilution of precision (meters)\n\
string gga8HorizontalDilutionOfPrescision\n\
#9. Antenna Altitude above/below mean-sea-level (geoid) (in meters)\n\
string gga9AntennaAltitudeAboveBelowMeanSeaLevel\n\
#10. Units of antenna altitude, meters\n\
string gga10UnitsOfAntennaAltitude_inMeters\n\
#11. Geoidal separation, the difference between the WGS-84 earth\n\
string gga11GeoidalSeparation\n\
#     ellipsoid and mean-sea-level (geoid), \"-\" means mean-sea-level\n\
#     below ellipsoid\n\
#12. Units of geoidal separation, meters\n\
string gga12UnitsOfGeoidalSeperation\n\
#13. Age of differential GPS data, time in seconds since last SC104\n\
string gga13AgeOfDifferentialGPSData\n\
#     type 1 or 9 update, null field when DGPS is not used\n\
#14. Differential reference station ID, 0000-1023\n\
string gga14DifferentialReferenceStationID\n\
#15. Checksum\n\
\n\
###############################################################################\n\
# $--GSA,a,a,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x.x,x.x,x.x*hh<CR><LF>\n\
#------------------------------------------------------------------------------\n\
#\n\
#Field Number:\n\
#\n\
#1. Selection mode: M=Manual, forced to operate in 2D or 3D, A=Automatic, 3D/2D\n\
string gsa1SelectionMode\n\
#2. Mode (1 = no fix, 2 = 2D fix, 3 = 3D fix)\n\
string gsa2Mode\n\
#3. ID of 1st satellite used for fix\n\
string gsa3ID1\n\
#4. ID of 2nd satellite used for fix\n\
string gsa4ID2\n\
#5. ID of 4rd satellite used for fix\n\
string gsa5ID3\n\
#6. ID of 4th satellite used for fix\n\
string gsa6ID4\n\
#7. ID of 5th satellite used for fix\n\
string gsa7ID5\n\
#8. ID of 6th satellite used for fix\n\
string gsa8ID6\n\
#9. ID of 7th satellite used for fix\n\
string gsa9ID7\n\
#10. ID of 8th satellite used for fix\n\
string gsa10ID8\n\
#11. ID of 9th satellite used for fix\n\
string gsa11ID9\n\
#12. ID of 10th satellite used for fix\n\
string gsa12ID10\n\
#13. ID of 11th satellite used for fix\n\
string gsa13ID11\n\
#14. ID of 12th satellite used for fix\n\
string gsa14ID12\n\
#15. PDOP\n\
string gsa15PDOP\n\
#16. HDOP\n\
string gsa16HDOP\n\
#17. VDOP\n\
string gsa17VDOP\n\
#18. Checksum\n\
#\n\
#\n\
#=== GSV - Satellites in view ===\n\
#\n\
#These sentences describe the sky position of a UPS satellite in view.\n\
#Typically they're shipped in a group of 2 or 3.\n\
#\n\
#------------------------------------------------------------------------------\n\
#        1 2 3 4 5 6 7     n\n\
#        | | | | | | |     |\n\
# $--GSV,x,x,x,x,x,x,x,...*hh<CR><LF>\n\
#------------------------------------------------------------------------------#\n\
#\n\
#Field Number:\n\
#\n\
int8 gsvAdet\n\
#1. total number of GSV messages to be transmitted in this group\n\
string gsv1NumberOfGSV\n\
#2. 1-origin number of this GSV message  within current group\n\
string gsv2NumberOfMessage\n\
#3. total number of satellites in view (leading zeros sent)\n\
string gsv3NumberOfStallitesInView\n\
#4. satellite PRN number (leading zeros sent)\n\
string gsv4SatellitePRNNumber\n\
#5. elevation in degrees (00-90) (leading zeros sent)\n\
string gsv5ElevationDegrees\n\
#6. azimuth in degrees to true north (000-359) (leading zeros sent)\n\
string gsv6AzimuthIndegries\n\
#7. SNR in dB (00-99) (leading zeros sent)\n\
string gsv7SRNin_dB\n\
#   more satellite info quadruples like 4-7\n\
string gsv8MoreSatelliteInfoQuadruples\n\
#   n) checksum\n\
#\n\
#Example:\n\
#    $GPGSV,3,1,11,03,03,111,00,04,15,270,00,06,01,010,00,13,06,292,00*74\n\
#    $GPGSV,3,2,11,14,25,170,00,16,57,208,39,18,67,296,40,19,40,246,00*74\n\
#    $GPGSV,3,3,11,22,42,067,42,24,14,311,43,27,05,244,00,,,,*4D\n\
#\n\
#Some GPS receivers may emit more than 12 quadruples (more than three\n\
#GPGSV sentences), even though NMEA-0813 doesn't allow this.  (The\n\
#extras might be WAAS satellites, for example.) Receivers may also\n\
#report quads for satellites they aren't tracking, in which case the\n\
#SNR field will be null; we don't know whether this is formally allowed\n\
#or not.\n\
#\n\
#\n\
#\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: gps_node/GPSStatus\n\
Header header\n\
\n\
# Satellites used in solution\n\
uint16 satellites_used # Number of satellites\n\
int32[] satellite_used_prn # PRN identifiers\n\
\n\
# Satellites visible\n\
uint16 satellites_visible\n\
int32[] satellite_visible_prn # PRN identifiers\n\
int32[] satellite_visible_z # Elevation of satellites\n\
int32[] satellite_visible_azimuth # Azimuth of satellites\n\
int32[] satellite_visible_snr # Signal-to-noise ratios (dB)\n\
\n\
# Measurement status\n\
int16 STATUS_NO_FIX=-1   # Unable to fix position\n\
int16 STATUS_FIX=0       # Normal fix\n\
int16 STATUS_SBAS_FIX=1  # Fixed using a satellite-based augmentation system\n\
int16 STATUS_GBAS_FIX=2  #          or a ground-based augmentation system\n\
int16 STATUS_DGPS_FIX=18 # Fixed with DGPS\n\
int16 STATUS_WAAS_FIX=33 # Fixed with WAAS\n\
int16 status\n\
\n\
uint16 SOURCE_NONE=0 # No information is available\n\
uint16 SOURCE_GPS=1 # Using standard GPS location [only valid for position_source]\n\
uint16 SOURCE_POINTS=2 # Motion/orientation fix is derived from successive points\n\
uint16 SOURCE_DOPPLER=4 # Motion is derived using the Doppler effect\n\
uint16 SOURCE_ALTIMETER=8 # Using an altimeter\n\
uint16 SOURCE_MAGNETIC=16 # Using magnetic sensors\n\
uint16 SOURCE_GYRO=32 # Using gyroscopes\n\
uint16 SOURCE_ACCEL=64 # Using accelerometers\n\
\n\
uint16 motion_source # Source for speed, climb and track\n\
uint16 orientation_source # Source for device orientation\n\
uint16 position_source # Source for position\n\
\n\
\n\
";
  }

  static const char* value(const  ::gps_node::GPSFix_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::gps_node::GPSFix_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::gps_node::GPSFix_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gps_node::GPSFix_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.status);
    stream.next(m.latitude);
    stream.next(m.longitude);
    stream.next(m.altitude);
    stream.next(m.track);
    stream.next(m.speed);
    stream.next(m.climb);
    stream.next(m.pitch);
    stream.next(m.roll);
    stream.next(m.dip);
    stream.next(m.time);
    stream.next(m.gdop);
    stream.next(m.pdop);
    stream.next(m.hdop);
    stream.next(m.vdop);
    stream.next(m.tdop);
    stream.next(m.err);
    stream.next(m.err_horz);
    stream.next(m.err_vert);
    stream.next(m.err_track);
    stream.next(m.err_speed);
    stream.next(m.err_climb);
    stream.next(m.err_time);
    stream.next(m.err_pitch);
    stream.next(m.err_roll);
    stream.next(m.err_dip);
    stream.next(m.position_covariance);
    stream.next(m.position_covariance_type);
    stream.next(m.lastRawData);
    stream.next(m.rmc1UTCTime);
    stream.next(m.rmc2STatus);
    stream.next(m.rmc3Latitude);
    stream.next(m.rmc4LatNorS);
    stream.next(m.rmc5Longitude);
    stream.next(m.rmc6LongEorW);
    stream.next(m.rmc7SpeedOverGroundInKnots);
    stream.next(m.rmc8TrackMadeGoodDegreeTrue);
    stream.next(m.rmc9Date);
    stream.next(m.rmc10MagneticVariationDegrees);
    stream.next(m.rmc11MagnetEorW);
    stream.next(m.rmc12FAAModeIndicator);
    stream.next(m.gga1UTC);
    stream.next(m.gga2Latitude);
    stream.next(m.gga3LatNorS);
    stream.next(m.gga4Longitude);
    stream.next(m.gga5LongEorW);
    stream.next(m.gga6GPSQuality);
    stream.next(m.gga6GPSQualityStatus);
    stream.next(m.gga7NumberOfSatellites);
    stream.next(m.gga8HorizontalDilutionOfPrescision);
    stream.next(m.gga9AntennaAltitudeAboveBelowMeanSeaLevel);
    stream.next(m.gga10UnitsOfAntennaAltitude_inMeters);
    stream.next(m.gga11GeoidalSeparation);
    stream.next(m.gga12UnitsOfGeoidalSeperation);
    stream.next(m.gga13AgeOfDifferentialGPSData);
    stream.next(m.gga14DifferentialReferenceStationID);
    stream.next(m.gsa1SelectionMode);
    stream.next(m.gsa2Mode);
    stream.next(m.gsa3ID1);
    stream.next(m.gsa4ID2);
    stream.next(m.gsa5ID3);
    stream.next(m.gsa6ID4);
    stream.next(m.gsa7ID5);
    stream.next(m.gsa8ID6);
    stream.next(m.gsa9ID7);
    stream.next(m.gsa10ID8);
    stream.next(m.gsa11ID9);
    stream.next(m.gsa12ID10);
    stream.next(m.gsa13ID11);
    stream.next(m.gsa14ID12);
    stream.next(m.gsa15PDOP);
    stream.next(m.gsa16HDOP);
    stream.next(m.gsa17VDOP);
    stream.next(m.gsvAdet);
    stream.next(m.gsv1NumberOfGSV);
    stream.next(m.gsv2NumberOfMessage);
    stream.next(m.gsv3NumberOfStallitesInView);
    stream.next(m.gsv4SatellitePRNNumber);
    stream.next(m.gsv5ElevationDegrees);
    stream.next(m.gsv6AzimuthIndegries);
    stream.next(m.gsv7SRNin_dB);
    stream.next(m.gsv8MoreSatelliteInfoQuadruples);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GPSFix_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_node::GPSFix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gps_node::GPSFix_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
s << std::endl;
    Printer< ::gps_node::GPSStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "track: ";
    Printer<double>::stream(s, indent + "  ", v.track);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "climb: ";
    Printer<double>::stream(s, indent + "  ", v.climb);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "dip: ";
    Printer<double>::stream(s, indent + "  ", v.dip);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "gdop: ";
    Printer<double>::stream(s, indent + "  ", v.gdop);
    s << indent << "pdop: ";
    Printer<double>::stream(s, indent + "  ", v.pdop);
    s << indent << "hdop: ";
    Printer<double>::stream(s, indent + "  ", v.hdop);
    s << indent << "vdop: ";
    Printer<double>::stream(s, indent + "  ", v.vdop);
    s << indent << "tdop: ";
    Printer<double>::stream(s, indent + "  ", v.tdop);
    s << indent << "err: ";
    Printer<double>::stream(s, indent + "  ", v.err);
    s << indent << "err_horz: ";
    Printer<double>::stream(s, indent + "  ", v.err_horz);
    s << indent << "err_vert: ";
    Printer<double>::stream(s, indent + "  ", v.err_vert);
    s << indent << "err_track: ";
    Printer<double>::stream(s, indent + "  ", v.err_track);
    s << indent << "err_speed: ";
    Printer<double>::stream(s, indent + "  ", v.err_speed);
    s << indent << "err_climb: ";
    Printer<double>::stream(s, indent + "  ", v.err_climb);
    s << indent << "err_time: ";
    Printer<double>::stream(s, indent + "  ", v.err_time);
    s << indent << "err_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.err_pitch);
    s << indent << "err_roll: ";
    Printer<double>::stream(s, indent + "  ", v.err_roll);
    s << indent << "err_dip: ";
    Printer<double>::stream(s, indent + "  ", v.err_dip);
    s << indent << "position_covariance[]" << std::endl;
    for (size_t i = 0; i < v.position_covariance.size(); ++i)
    {
      s << indent << "  position_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_covariance[i]);
    }
    s << indent << "position_covariance_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_covariance_type);
    s << indent << "lastRawData: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lastRawData);
    s << indent << "rmc1UTCTime: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rmc1UTCTime);
    s << indent << "rmc2STatus: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rmc2STatus);
    s << indent << "rmc3Latitude: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rmc3Latitude);
    s << indent << "rmc4LatNorS: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rmc4LatNorS);
    s << indent << "rmc5Longitude: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rmc5Longitude);
    s << indent << "rmc6LongEorW: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rmc6LongEorW);
    s << indent << "rmc7SpeedOverGroundInKnots: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rmc7SpeedOverGroundInKnots);
    s << indent << "rmc8TrackMadeGoodDegreeTrue: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rmc8TrackMadeGoodDegreeTrue);
    s << indent << "rmc9Date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rmc9Date);
    s << indent << "rmc10MagneticVariationDegrees: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rmc10MagneticVariationDegrees);
    s << indent << "rmc11MagnetEorW: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rmc11MagnetEorW);
    s << indent << "rmc12FAAModeIndicator: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rmc12FAAModeIndicator);
    s << indent << "gga1UTC: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga1UTC);
    s << indent << "gga2Latitude: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga2Latitude);
    s << indent << "gga3LatNorS: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga3LatNorS);
    s << indent << "gga4Longitude: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga4Longitude);
    s << indent << "gga5LongEorW: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga5LongEorW);
    s << indent << "gga6GPSQuality: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga6GPSQuality);
    s << indent << "gga6GPSQualityStatus: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga6GPSQualityStatus);
    s << indent << "gga7NumberOfSatellites: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga7NumberOfSatellites);
    s << indent << "gga8HorizontalDilutionOfPrescision: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga8HorizontalDilutionOfPrescision);
    s << indent << "gga9AntennaAltitudeAboveBelowMeanSeaLevel: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga9AntennaAltitudeAboveBelowMeanSeaLevel);
    s << indent << "gga10UnitsOfAntennaAltitude_inMeters: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga10UnitsOfAntennaAltitude_inMeters);
    s << indent << "gga11GeoidalSeparation: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga11GeoidalSeparation);
    s << indent << "gga12UnitsOfGeoidalSeperation: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga12UnitsOfGeoidalSeperation);
    s << indent << "gga13AgeOfDifferentialGPSData: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga13AgeOfDifferentialGPSData);
    s << indent << "gga14DifferentialReferenceStationID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gga14DifferentialReferenceStationID);
    s << indent << "gsa1SelectionMode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa1SelectionMode);
    s << indent << "gsa2Mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa2Mode);
    s << indent << "gsa3ID1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa3ID1);
    s << indent << "gsa4ID2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa4ID2);
    s << indent << "gsa5ID3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa5ID3);
    s << indent << "gsa6ID4: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa6ID4);
    s << indent << "gsa7ID5: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa7ID5);
    s << indent << "gsa8ID6: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa8ID6);
    s << indent << "gsa9ID7: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa9ID7);
    s << indent << "gsa10ID8: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa10ID8);
    s << indent << "gsa11ID9: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa11ID9);
    s << indent << "gsa12ID10: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa12ID10);
    s << indent << "gsa13ID11: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa13ID11);
    s << indent << "gsa14ID12: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa14ID12);
    s << indent << "gsa15PDOP: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa15PDOP);
    s << indent << "gsa16HDOP: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa16HDOP);
    s << indent << "gsa17VDOP: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsa17VDOP);
    s << indent << "gsvAdet: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gsvAdet);
    s << indent << "gsv1NumberOfGSV: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsv1NumberOfGSV);
    s << indent << "gsv2NumberOfMessage: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsv2NumberOfMessage);
    s << indent << "gsv3NumberOfStallitesInView: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsv3NumberOfStallitesInView);
    s << indent << "gsv4SatellitePRNNumber: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsv4SatellitePRNNumber);
    s << indent << "gsv5ElevationDegrees: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsv5ElevationDegrees);
    s << indent << "gsv6AzimuthIndegries: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsv6AzimuthIndegries);
    s << indent << "gsv7SRNin_dB: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsv7SRNin_dB);
    s << indent << "gsv8MoreSatelliteInfoQuadruples: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gsv8MoreSatelliteInfoQuadruples);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GPS_NODE_MESSAGE_GPSFIX_H

