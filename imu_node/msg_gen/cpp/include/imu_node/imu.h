/* Auto-generated by genmsg_cpp for file /home/ramazan/workspace_jaguar/imu_node/msg/imu.msg */
#ifndef IMU_NODE_MESSAGE_IMU_H
#define IMU_NODE_MESSAGE_IMU_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace imu_node
{
template <class ContainerAllocator>
struct imu_ {
  typedef imu_<ContainerAllocator> Type;

  imu_()
  : header()
  , accelx(0.0)
  , accely(0.0)
  , accelz(0.0)
  , gyrox(0.0)
  , gyroy(0.0)
  , gyroz(0.0)
  , pitch(0.0)
  , roll(0.0)
  , yaw(0.0)
  , rawstr()
  , capturetime()
  {
  }

  imu_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , accelx(0.0)
  , accely(0.0)
  , accelz(0.0)
  , gyrox(0.0)
  , gyroy(0.0)
  , gyroz(0.0)
  , pitch(0.0)
  , roll(0.0)
  , yaw(0.0)
  , rawstr(_alloc)
  , capturetime()
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef double _accelx_type;
  double accelx;

  typedef double _accely_type;
  double accely;

  typedef double _accelz_type;
  double accelz;

  typedef double _gyrox_type;
  double gyrox;

  typedef double _gyroy_type;
  double gyroy;

  typedef double _gyroz_type;
  double gyroz;

  typedef double _pitch_type;
  double pitch;

  typedef double _roll_type;
  double roll;

  typedef double _yaw_type;
  double yaw;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rawstr_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rawstr;

  typedef ros::Time _capturetime_type;
  ros::Time capturetime;


  typedef boost::shared_ptr< ::imu_node::imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu_node::imu_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct imu
typedef  ::imu_node::imu_<std::allocator<void> > imu;

typedef boost::shared_ptr< ::imu_node::imu> imuPtr;
typedef boost::shared_ptr< ::imu_node::imu const> imuConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::imu_node::imu_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::imu_node::imu_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace imu_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::imu_node::imu_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::imu_node::imu_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::imu_node::imu_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e735649411ccab8314d71bfa2b8a46c";
  }

  static const char* value(const  ::imu_node::imu_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1e735649411ccab8ULL;
  static const uint64_t static_value2 = 0x314d71bfa2b8a46cULL;
};

template<class ContainerAllocator>
struct DataType< ::imu_node::imu_<ContainerAllocator> > {
  static const char* value() 
  {
    return "imu_node/imu";
  }

  static const char* value(const  ::imu_node::imu_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::imu_node::imu_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
float64 accelx\n\
float64 accely\n\
float64 accelz\n\
float64 gyrox\n\
float64 gyroy\n\
float64 gyroz\n\
float64 pitch\n\
float64 roll\n\
float64 yaw\n\
string  rawstr\n\
time    capturetime\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::imu_node::imu_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::imu_node::imu_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::imu_node::imu_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::imu_node::imu_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.accelx);
    stream.next(m.accely);
    stream.next(m.accelz);
    stream.next(m.gyrox);
    stream.next(m.gyroy);
    stream.next(m.gyroz);
    stream.next(m.pitch);
    stream.next(m.roll);
    stream.next(m.yaw);
    stream.next(m.rawstr);
    stream.next(m.capturetime);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct imu_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu_node::imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::imu_node::imu_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "accelx: ";
    Printer<double>::stream(s, indent + "  ", v.accelx);
    s << indent << "accely: ";
    Printer<double>::stream(s, indent + "  ", v.accely);
    s << indent << "accelz: ";
    Printer<double>::stream(s, indent + "  ", v.accelz);
    s << indent << "gyrox: ";
    Printer<double>::stream(s, indent + "  ", v.gyrox);
    s << indent << "gyroy: ";
    Printer<double>::stream(s, indent + "  ", v.gyroy);
    s << indent << "gyroz: ";
    Printer<double>::stream(s, indent + "  ", v.gyroz);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "rawstr: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rawstr);
    s << indent << "capturetime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.capturetime);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IMU_NODE_MESSAGE_IMU_H

